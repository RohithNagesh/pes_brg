
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/openlane/pes_brg/src/pes_brg.v
Parsing SystemVerilog input from `/openlane/openlane/pes_brg/src/pes_brg.v' to AST representation.
Generating RTLIL representation for module `\pes_brg'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/openlane/pes_brg/runs/RUN/tmp/synthesis/hierarchy.dot'.
Dumping module pes_brg to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \pes_brg

3.2. Analyzing design hierarchy..
Top module:  \pes_brg
Removed 0 unused modules.
Renaming module pes_brg to pes_brg.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \pes_brg

5.2. Analyzing design hierarchy..
Top module:  \pes_brg
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 12 switch rules as full_case in process $proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1 in module pes_brg.
Removed a total of 0 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 4 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:13$23'.
  Set init value: \cnt4 = 4'0000
Found init rule in `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:12$22'.
  Set init value: \cnt3 = 3'000
Found init rule in `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:11$21'.
  Set init value: \cnt2 = 2'00
Found init rule in `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:10$20'.
  Set init value: \cnt1 = 6'000000

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~12 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:13$23'.
Creating decoders for process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:12$22'.
Creating decoders for process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:11$21'.
Creating decoders for process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:10$20'.
Creating decoders for process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
     1/5: $0\cnt4[3:0]
     2/5: $0\cnt3[2:0]
     3/5: $0\cnt2[1:0]
     4/5: $0\cnt1[5:0]
     5/5: $0\clkout[0:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\pes_brg.\clkout' using process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
  created $dff cell `$procdff$139' with positive edge clock.
Creating register for signal `\pes_brg.\cnt1' using process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
  created $dff cell `$procdff$140' with positive edge clock.
Creating register for signal `\pes_brg.\cnt2' using process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
  created $dff cell `$procdff$141' with positive edge clock.
Creating register for signal `\pes_brg.\cnt3' using process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
  created $dff cell `$procdff$142' with positive edge clock.
Creating register for signal `\pes_brg.\cnt4' using process `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
  created $dff cell `$procdff$143' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:13$23'.
Removing empty process `pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:12$22'.
Removing empty process `pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:11$21'.
Removing empty process `pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:10$20'.
Found and cleaned up 12 empty switches in `\pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
Removing empty process `pes_brg.$proc$/openlane/openlane/pes_brg/src/pes_brg.v:14$1'.
Cleaned up 12 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module pes_brg...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.
<suppressed ~5 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 0 unused cells and 40 unused wires.
<suppressed ~1 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
<suppressed ~57 debug messages>
Removed a total of 19 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 0 unused cells and 24 unused wires.
<suppressed ~1 debug messages>

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

22.9. Rerunning OPT passes. (Maybe there is more to do..)

22.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

22.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
    New ctrl vector for $pmux cell $procmux$78: { $procmux$100_CMP $auto$opt_reduce.cc:134:opt_pmux$145 }
  Optimizing cells in module \pes_brg.
Performed a total of 1 changes.

22.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

22.13. Executing OPT_DFF pass (perform DFF optimizations).

22.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

22.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

22.16. Rerunning OPT passes. (Maybe there is more to do..)

22.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

22.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

22.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

22.20. Executing OPT_DFF pass (perform DFF optimizations).

22.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

22.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

22.23. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$143 ($dff) from module pes_brg (D = $0\cnt4[3:0], Q = \cnt4).
Adding EN signal on $procdff$142 ($dff) from module pes_brg (D = $0\cnt3[2:0], Q = \cnt3).
Adding EN signal on $procdff$141 ($dff) from module pes_brg (D = $0\cnt2[1:0], Q = \cnt2).
Adding EN signal on $procdff$140 ($dff) from module pes_brg (D = $0\cnt1[5:0], Q = \cnt1).
Adding EN signal on $procdff$139 ($dff) from module pes_brg (D = $0\clkout[0:0], Q = \clkout).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.
<suppressed ~5 debug messages>

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
<suppressed ~15 debug messages>
Removed a total of 5 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

24.16. Rerunning OPT passes. (Maybe there is more to do..)

24.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

24.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

24.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

24.20. Executing OPT_DFF pass (perform DFF optimizations).

24.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

24.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

24.23. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:58$8 ($add).
Removed top 30 bits (of 32) from port Y of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:58$8 ($add).
Removed top 31 bits (of 32) from port B of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:87$13 ($add).
Removed top 29 bits (of 32) from port Y of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:87$13 ($add).
Removed top 31 bits (of 32) from port B of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:114$18 ($add).
Removed top 28 bits (of 32) from port Y of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:114$18 ($add).
Removed top 31 bits (of 32) from port B of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:117$19 ($add).
Removed top 26 bits (of 32) from port Y of cell pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:117$19 ($add).
Removed top 1 bits (of 2) from port B of cell pes_brg.$procmux$131_CMP0 ($eq).
Removed top 28 bits (of 32) from wire pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:114$18_Y.
Removed top 30 bits (of 32) from wire pes_brg.$add$/openlane/openlane/pes_brg/src/pes_brg.v:58$8_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module pes_brg:
  creating $macc model for $add$/openlane/openlane/pes_brg/src/pes_brg.v:114$18 ($add).
  creating $macc model for $add$/openlane/openlane/pes_brg/src/pes_brg.v:117$19 ($add).
  creating $macc model for $add$/openlane/openlane/pes_brg/src/pes_brg.v:58$8 ($add).
  creating $macc model for $add$/openlane/openlane/pes_brg/src/pes_brg.v:87$13 ($add).
  creating $alu model for $macc $add$/openlane/openlane/pes_brg/src/pes_brg.v:87$13.
  creating $alu model for $macc $add$/openlane/openlane/pes_brg/src/pes_brg.v:58$8.
  creating $alu model for $macc $add$/openlane/openlane/pes_brg/src/pes_brg.v:117$19.
  creating $alu model for $macc $add$/openlane/openlane/pes_brg/src/pes_brg.v:114$18.
  creating $alu cell for $add$/openlane/openlane/pes_brg/src/pes_brg.v:114$18: $auto$alumacc.cc:485:replace_alu$201
  creating $alu cell for $add$/openlane/openlane/pes_brg/src/pes_brg.v:117$19: $auto$alumacc.cc:485:replace_alu$204
  creating $alu cell for $add$/openlane/openlane/pes_brg/src/pes_brg.v:58$8: $auto$alumacc.cc:485:replace_alu$207
  creating $alu cell for $add$/openlane/openlane/pes_brg/src/pes_brg.v:87$13: $auto$alumacc.cc:485:replace_alu$210
  created 4 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~6 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

30.9. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.
<suppressed ~19 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$164 ($dffe) from module pes_brg (D = $procmux$61_Y, Q = \cnt2, rval = 2'00).
Adding SRST signal on $auto$ff.cc:266:slice$155 ($dffe) from module pes_brg (D = $procmux$44_Y, Q = \cnt3, rval = 3'000).
Adding SRST signal on $auto$ff.cc:266:slice$146 ($dffe) from module pes_brg (D = $procmux$28_Y, Q = \cnt4, rval = 4'0000).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 6 unused cells and 23 unused wires.
<suppressed ~7 debug messages>

33.5. Rerunning OPT passes. (Removed registers in this run.)

33.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

33.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

33.8. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$223 ($sdffce) from module pes_brg (D = $add$/openlane/openlane/pes_brg/src/pes_brg.v:114$18_Y, Q = \cnt4, rval = 4'0000).
Adding SRST signal on $auto$ff.cc:266:slice$218 ($sdffce) from module pes_brg (D = $add$/openlane/openlane/pes_brg/src/pes_brg.v:87$13_Y [2:0], Q = \cnt3, rval = 3'000).
Adding SRST signal on $auto$ff.cc:266:slice$213 ($sdffce) from module pes_brg (D = $add$/openlane/openlane/pes_brg/src/pes_brg.v:58$8_Y, Q = \cnt2, rval = 2'00).

33.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 3 unused cells and 3 unused wires.
<suppressed ~4 debug messages>

33.10. Rerunning OPT passes. (Removed registers in this run.)

33.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

33.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

33.13. Executing OPT_DFF pass (perform DFF optimizations).

33.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

33.15. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
    New input vector for $reduce_or cell $auto$opt_dff.cc:254:combine_resets$236: { $auto$rtlil.cc:2461:Not$215 $eq$/openlane/openlane/pes_brg/src/pes_brg.v:52$6_Y \reset }
    New input vector for $reduce_or cell $auto$opt_dff.cc:254:combine_resets$230: { $auto$rtlil.cc:2461:Not$225 $eq$/openlane/openlane/pes_brg/src/pes_brg.v:108$16_Y \reset }
    New input vector for $reduce_or cell $auto$opt_dff.cc:254:combine_resets$233: { $auto$rtlil.cc:2461:Not$220 $eq$/openlane/openlane/pes_brg/src/pes_brg.v:81$11_Y \reset }
    Consolidated identical input bits for $pmux cell $procmux$110:
      Old ports: A=$procmux$108_Y, B={ $procmux$108_Y $procmux$108_Y $procmux$108_Y }, Y=$0\clkout[0:0]
      New connections: $0\clkout[0:0] = $procmux$108_Y
  Optimizing cells in module \pes_brg.
Performed a total of 4 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 3 unused cells and 4 unused wires.
<suppressed ~4 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$ff.cc:266:slice$180 ($dffe) from module pes_brg (D = $not$/openlane/openlane/pes_brg/src/pes_brg.v:111$17_Y, Q = \clkout, rval = 1'0).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$3ef7d3dd227da7627a99c5e5a6a4deb817573e39\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $not.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_90_alu for cells of type $alu.
Using template $paramod$175e67c02b86e96b1288b9dc100122520d7240d8\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $mux.
Using template $paramod$32a7b7b86c07519b7537abc18e96f0331f97914d\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000011 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000110 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000010 for cells of type $lcu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000100 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~702 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.
<suppressed ~147 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 12 unused cells and 198 unused wires.
<suppressed ~13 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\pes_brg' to `<abc-temp-dir>/input.blif'..
Extracted 116 gates and 136 wires to a netlist network with 19 inputs and 24 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:        1
ABC RESULTS:              NAND cells:        4
ABC RESULTS:                OR cells:       16
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:               NOR cells:        5
ABC RESULTS:            ANDNOT cells:       31
ABC RESULTS:               MUX cells:        8
ABC RESULTS:               NOT cells:        6
ABC RESULTS:               AND cells:        7
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:       93
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       24
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 0 unused cells and 108 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \pes_brg

40.2. Analyzing design hierarchy..
Top module:  \pes_brg
Removed 0 unused modules.

41. Printing statistics.

=== pes_brg ===

   Number of wires:                 97
   Number of wire bits:            126
   Number of public wires:           8
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                113
     $_ANDNOT_                      31
     $_AND_                          7
     $_DFFE_PP_                      6
     $_MUX_                          8
     $_NAND_                         4
     $_NOR_                          5
     $_NOT_                          6
     $_ORNOT_                       10
     $_OR_                          15
     $_SDFFCE_PP0P_                 10
     $_XNOR_                         1
     $_XOR_                         10

42. Executing CHECK pass (checking for obvious problems).
Checking module pes_brg...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/openlane/openlane/pes_brg/runs/RUN/tmp/synthesis/post_techmap.dot'.
Dumping module pes_brg to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \pes_brg..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \pes_brg.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\pes_brg'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module pes_brg.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..

47. Printing statistics.

=== pes_brg ===

   Number of wires:                 97
   Number of wire bits:            126
   Number of public wires:           8
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                113
     $_ANDNOT_                      31
     $_AND_                          7
     $_DFFE_PP_                      6
     $_MUX_                          8
     $_NAND_                         4
     $_NOR_                          5
     $_NOT_                          6
     $_ORNOT_                       10
     $_OR_                          15
     $_SDFFCE_PP0P_                 10
     $_XNOR_                         1
     $_XOR_                         10

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/rohith_nagesh/ASIC/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/rohith_nagesh/ASIC/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/rohith_nagesh/ASIC/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/rohith_nagesh/ASIC/work/tools/openlane_working_dir/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\pes_brg':
  mapped 16 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== pes_brg ===

   Number of wires:                123
   Number of wire bits:            152
   Number of public wires:           8
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                139
     $_ANDNOT_                      31
     $_AND_                          7
     $_MUX_                         34
     $_NAND_                         4
     $_NOR_                          5
     $_NOT_                          6
     $_ORNOT_                       10
     $_OR_                          15
     $_XNOR_                         1
     $_XOR_                         10
     sky130_fd_sc_hd__dfxtp_2       16

[INFO]: USING STRATEGY DELAY 0

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\pes_brg' to `/tmp/yosys-abc-WwGfTp/input.blif'..
Extracted 123 gates and 143 wires to a netlist network with 19 inputs and 16 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-WwGfTp/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-WwGfTp/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-WwGfTp/input.blif 
ABC: + read_lib -w /openlane/openlane/pes_brg/runs/RUN/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.08 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/openlane/pes_brg/runs/RUN/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.11 sec
ABC: Memory =    9.54 MB. Time =     0.11 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/openlane/pes_brg/runs/RUN/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/openlane/pes_brg/runs/RUN/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 2100.0 -M 6 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + map -p -B 0.2 -A 0.9 -M 0 
ABC: The cell areas are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.20).
ABC: + retime -D -D 2100.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 2100.0 
ABC: Current delay (1182.11 ps) does not exceed the target delay (2100.00 ps). Upsizing is not performed.
ABC: + dnsize -D 2100.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    103 ( 16.5 %)   Cap = 12.9 ff (  2.9 %)   Area =      935.90 ( 83.5 %)   Delay =  1374.19 ps  ( 20.4 %)               
ABC: Path  0 --       6 : 0    4 pi                         A =   0.00  Df =  32.8  -18.3 ps  S =  51.1 ps  Cin =  0.0 ff  Cout =   9.6 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      40 : 1   10 sky130_fd_sc_hd__buf_1     A =   3.75  Df = 377.7 -159.1 ps  S = 424.7 ps  Cin =  2.1 ff  Cout =  35.8 ff  Cmax = 130.0 ff  G = 1620  
ABC: Path  2 --      41 : 3    4 sky130_fd_sc_hd__nand3b_2  A =  11.26  Df = 531.2 -160.8 ps  S = 118.0 ps  Cin =  3.5 ff  Cout =   9.5 ff  Cmax = 263.7 ff  G =  260  
ABC: Path  3 --      60 : 3    1 sky130_fd_sc_hd__or3b_2    A =   8.76  Df =1000.5 -499.9 ps  S =  84.4 ps  Cin =  1.5 ff  Cout =   5.0 ff  Cmax = 269.2 ff  G =  318  
ABC: Path  4 --      65 : 4    1 sky130_fd_sc_hd__o2bb2ai_2 A =  15.01  Df =1374.2  -22.6 ps  S = 410.1 ps  Cin =  4.6 ff  Cout =  33.4 ff  Cmax = 134.6 ff  G =  722  
ABC: Start-point = pi5 (\sel [1]).  End-point = po1 ($auto$rtlil.cc:2669:MuxGate$944).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   19/   16  lat =    0  nd =   103  edge =    304  area =361.28  delay =569.03  lev = 5
ABC: + write_blif /tmp/yosys-abc-WwGfTp/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        4
ABC RESULTS:        internal signals:      108
ABC RESULTS:           input signals:       19
ABC RESULTS:          output signals:       16
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pes_brg..
Removed 0 unused cells and 151 unused wires.
<suppressed ~1 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module pes_brg...
Warning: Wire pes_brg.\clkout is used but has no driver.
Found and reported 1 problems.

61. Printing statistics.

=== pes_brg ===

   Number of wires:                122
   Number of wire bits:            123
   Number of public wires:          19
   Number of public wire bits:      20
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                119
     sky130_fd_sc_hd__a211oi_2       2
     sky130_fd_sc_hd__a21bo_2        1
     sky130_fd_sc_hd__a21o_2         2
     sky130_fd_sc_hd__a21oi_2        4
     sky130_fd_sc_hd__a221oi_2       1
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         4
     sky130_fd_sc_hd__a32o_2         2
     sky130_fd_sc_hd__a32oi_2        2
     sky130_fd_sc_hd__a41o_2         2
     sky130_fd_sc_hd__and2_2         2
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and3_2         2
     sky130_fd_sc_hd__and4_2         2
     sky130_fd_sc_hd__and4b_2        1
     sky130_fd_sc_hd__buf_1          7
     sky130_fd_sc_hd__dfxtp_2       16
     sky130_fd_sc_hd__inv_2         10
     sky130_fd_sc_hd__mux2_2         1
     sky130_fd_sc_hd__nand2_2        5
     sky130_fd_sc_hd__nand3_2        4
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        4
     sky130_fd_sc_hd__nand4b_2       3
     sky130_fd_sc_hd__nor2_2         6
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__nor3b_2        1
     sky130_fd_sc_hd__o2111ai_2      5
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o211ai_2       2
     sky130_fd_sc_hd__o21a_2         3
     sky130_fd_sc_hd__o21ai_2        6
     sky130_fd_sc_hd__o22a_2         1
     sky130_fd_sc_hd__o2bb2ai_2      4
     sky130_fd_sc_hd__or2_2          5
     sky130_fd_sc_hd__or2b_2         1
     sky130_fd_sc_hd__or3_2          1
     sky130_fd_sc_hd__or3b_2         1

   Chip area for module '\pes_brg': 1276.224000

62. Executing Verilog backend.
Dumping module `\pes_brg'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 440cb50a6d, CPU: user 0.50s system 0.01s, MEM: 28.91 MB peak
Yosys 0.34 (git sha1 4a1b5599258, gcc 8.3.1 -fPIC -Os)
Time spent: 43% 2x abc (0 sec), 13% 4x stat (0 sec), ...
